// Generated by gencpp from file rio_control_node/Encoder_Data.msg
// DO NOT EDIT!


#ifndef RIO_CONTROL_NODE_MESSAGE_ENCODER_DATA_H
#define RIO_CONTROL_NODE_MESSAGE_ENCODER_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rio_control_node/Encoder_Sensor_Data.h>

namespace rio_control_node
{
template <class ContainerAllocator>
struct Encoder_Data_
{
  typedef Encoder_Data_<ContainerAllocator> Type;

  Encoder_Data_()
    : encoderData()  {
    }
  Encoder_Data_(const ContainerAllocator& _alloc)
    : encoderData(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator> >::other >  _encoderData_type;
  _encoderData_type encoderData;





  typedef boost::shared_ptr< ::rio_control_node::Encoder_Data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rio_control_node::Encoder_Data_<ContainerAllocator> const> ConstPtr;

}; // struct Encoder_Data_

typedef ::rio_control_node::Encoder_Data_<std::allocator<void> > Encoder_Data;

typedef boost::shared_ptr< ::rio_control_node::Encoder_Data > Encoder_DataPtr;
typedef boost::shared_ptr< ::rio_control_node::Encoder_Data const> Encoder_DataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rio_control_node::Encoder_Data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rio_control_node::Encoder_Data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rio_control_node::Encoder_Data_<ContainerAllocator1> & lhs, const ::rio_control_node::Encoder_Data_<ContainerAllocator2> & rhs)
{
  return lhs.encoderData == rhs.encoderData;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rio_control_node::Encoder_Data_<ContainerAllocator1> & lhs, const ::rio_control_node::Encoder_Data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rio_control_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Encoder_Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Encoder_Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Encoder_Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Encoder_Data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Encoder_Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Encoder_Data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rio_control_node::Encoder_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f99afe2c4edd57a081cd7d3afe865aa";
  }

  static const char* value(const ::rio_control_node::Encoder_Data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f99afe2c4edd57aULL;
  static const uint64_t static_value2 = 0x081cd7d3afe865aaULL;
};

template<class ContainerAllocator>
struct DataType< ::rio_control_node::Encoder_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rio_control_node/Encoder_Data";
  }

  static const char* value(const ::rio_control_node::Encoder_Data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rio_control_node::Encoder_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Encoder_Sensor_Data[] encoderData\n"
"================================================================================\n"
"MSG: rio_control_node/Encoder_Sensor_Data\n"
"int32 id\n"
"float64 position\n"
"float64 velocity\n"
"bool faulted\n"
;
  }

  static const char* value(const ::rio_control_node::Encoder_Data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rio_control_node::Encoder_Data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.encoderData);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Encoder_Data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rio_control_node::Encoder_Data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rio_control_node::Encoder_Data_<ContainerAllocator>& v)
  {
    s << indent << "encoderData[]" << std::endl;
    for (size_t i = 0; i < v.encoderData.size(); ++i)
    {
      s << indent << "  encoderData[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator> >::stream(s, indent + "    ", v.encoderData[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIO_CONTROL_NODE_MESSAGE_ENCODER_DATA_H
