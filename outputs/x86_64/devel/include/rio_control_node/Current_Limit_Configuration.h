// Generated by gencpp from file rio_control_node/Current_Limit_Configuration.msg
// DO NOT EDIT!


#ifndef RIO_CONTROL_NODE_MESSAGE_CURRENT_LIMIT_CONFIGURATION_H
#define RIO_CONTROL_NODE_MESSAGE_CURRENT_LIMIT_CONFIGURATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rio_control_node
{
template <class ContainerAllocator>
struct Current_Limit_Configuration_
{
  typedef Current_Limit_Configuration_<ContainerAllocator> Type;

  Current_Limit_Configuration_()
    : enable(false)
    , current_limit(0.0)
    , trigger_threshold_current(0.0)
    , trigger_threshold_time(0.0)  {
    }
  Current_Limit_Configuration_(const ContainerAllocator& _alloc)
    : enable(false)
    , current_limit(0.0)
    , trigger_threshold_current(0.0)
    , trigger_threshold_time(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _enable_type;
  _enable_type enable;

   typedef double _current_limit_type;
  _current_limit_type current_limit;

   typedef double _trigger_threshold_current_type;
  _trigger_threshold_current_type trigger_threshold_current;

   typedef double _trigger_threshold_time_type;
  _trigger_threshold_time_type trigger_threshold_time;





  typedef boost::shared_ptr< ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator> const> ConstPtr;

}; // struct Current_Limit_Configuration_

typedef ::rio_control_node::Current_Limit_Configuration_<std::allocator<void> > Current_Limit_Configuration;

typedef boost::shared_ptr< ::rio_control_node::Current_Limit_Configuration > Current_Limit_ConfigurationPtr;
typedef boost::shared_ptr< ::rio_control_node::Current_Limit_Configuration const> Current_Limit_ConfigurationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator1> & lhs, const ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator2> & rhs)
{
  return lhs.enable == rhs.enable &&
    lhs.current_limit == rhs.current_limit &&
    lhs.trigger_threshold_current == rhs.trigger_threshold_current &&
    lhs.trigger_threshold_time == rhs.trigger_threshold_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator1> & lhs, const ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rio_control_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b094982e5c4f2662f97e3e7f3a069b0";
  }

  static const char* value(const ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b094982e5c4f266ULL;
  static const uint64_t static_value2 = 0x2f97e3e7f3a069b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rio_control_node/Current_Limit_Configuration";
  }

  static const char* value(const ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool enable\n"
"float64 current_limit\n"
"float64 trigger_threshold_current\n"
"float64 trigger_threshold_time\n"
;
  }

  static const char* value(const ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable);
      stream.next(m.current_limit);
      stream.next(m.trigger_threshold_current);
      stream.next(m.trigger_threshold_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Current_Limit_Configuration_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rio_control_node::Current_Limit_Configuration_<ContainerAllocator>& v)
  {
    s << indent << "enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable);
    s << indent << "current_limit: ";
    Printer<double>::stream(s, indent + "  ", v.current_limit);
    s << indent << "trigger_threshold_current: ";
    Printer<double>::stream(s, indent + "  ", v.trigger_threshold_current);
    s << indent << "trigger_threshold_time: ";
    Printer<double>::stream(s, indent + "  ", v.trigger_threshold_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIO_CONTROL_NODE_MESSAGE_CURRENT_LIMIT_CONFIGURATION_H
