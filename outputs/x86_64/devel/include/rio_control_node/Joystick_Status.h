// Generated by gencpp from file rio_control_node/Joystick_Status.msg
// DO NOT EDIT!


#ifndef RIO_CONTROL_NODE_MESSAGE_JOYSTICK_STATUS_H
#define RIO_CONTROL_NODE_MESSAGE_JOYSTICK_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rio_control_node/Joystick.h>

namespace rio_control_node
{
template <class ContainerAllocator>
struct Joystick_Status_
{
  typedef Joystick_Status_<ContainerAllocator> Type;

  Joystick_Status_()
    : joysticks()  {
    }
  Joystick_Status_(const ContainerAllocator& _alloc)
    : joysticks(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::rio_control_node::Joystick_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rio_control_node::Joystick_<ContainerAllocator> >::other >  _joysticks_type;
  _joysticks_type joysticks;





  typedef boost::shared_ptr< ::rio_control_node::Joystick_Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rio_control_node::Joystick_Status_<ContainerAllocator> const> ConstPtr;

}; // struct Joystick_Status_

typedef ::rio_control_node::Joystick_Status_<std::allocator<void> > Joystick_Status;

typedef boost::shared_ptr< ::rio_control_node::Joystick_Status > Joystick_StatusPtr;
typedef boost::shared_ptr< ::rio_control_node::Joystick_Status const> Joystick_StatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rio_control_node::Joystick_Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rio_control_node::Joystick_Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rio_control_node::Joystick_Status_<ContainerAllocator1> & lhs, const ::rio_control_node::Joystick_Status_<ContainerAllocator2> & rhs)
{
  return lhs.joysticks == rhs.joysticks;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rio_control_node::Joystick_Status_<ContainerAllocator1> & lhs, const ::rio_control_node::Joystick_Status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rio_control_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Joystick_Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Joystick_Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Joystick_Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Joystick_Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Joystick_Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Joystick_Status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rio_control_node::Joystick_Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6a2c90b797652bb6fe1bfe9f60baa7dd";
  }

  static const char* value(const ::rio_control_node::Joystick_Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6a2c90b797652bb6ULL;
  static const uint64_t static_value2 = 0xfe1bfe9f60baa7ddULL;
};

template<class ContainerAllocator>
struct DataType< ::rio_control_node::Joystick_Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rio_control_node/Joystick_Status";
  }

  static const char* value(const ::rio_control_node::Joystick_Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rio_control_node::Joystick_Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Joystick[] joysticks\n"
"================================================================================\n"
"MSG: rio_control_node/Joystick\n"
"int32 index\n"
"float32[] axes\n"
"uint8[] buttons\n"
"int16[] povs\n"
;
  }

  static const char* value(const ::rio_control_node::Joystick_Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rio_control_node::Joystick_Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joysticks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Joystick_Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rio_control_node::Joystick_Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rio_control_node::Joystick_Status_<ContainerAllocator>& v)
  {
    s << indent << "joysticks[]" << std::endl;
    for (size_t i = 0; i < v.joysticks.size(); ++i)
    {
      s << indent << "  joysticks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rio_control_node::Joystick_<ContainerAllocator> >::stream(s, indent + "    ", v.joysticks[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIO_CONTROL_NODE_MESSAGE_JOYSTICK_STATUS_H
