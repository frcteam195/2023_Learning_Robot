// Generated by gencpp from file rio_control_node/Encoder_Config.msg
// DO NOT EDIT!


#ifndef RIO_CONTROL_NODE_MESSAGE_ENCODER_CONFIG_H
#define RIO_CONTROL_NODE_MESSAGE_ENCODER_CONFIG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rio_control_node
{
template <class ContainerAllocator>
struct Encoder_Config_
{
  typedef Encoder_Config_<ContainerAllocator> Type;

  Encoder_Config_()
    : id(0)
    , encoder_type(0)
    , sensor_source(0)
    , can_network(0)  {
    }
  Encoder_Config_(const ContainerAllocator& _alloc)
    : id(0)
    , encoder_type(0)
    , sensor_source(0)
    , can_network(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int8_t _encoder_type_type;
  _encoder_type_type encoder_type;

   typedef int8_t _sensor_source_type;
  _sensor_source_type sensor_source;

   typedef int8_t _can_network_type;
  _can_network_type can_network;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CANCoder)
  #undef CANCoder
#endif
#if defined(_WIN32) && defined(ENCODERSOURCE_RELATIVE)
  #undef ENCODERSOURCE_RELATIVE
#endif
#if defined(_WIN32) && defined(ENCODERSOURCE_ABSOLUTE)
  #undef ENCODERSOURCE_ABSOLUTE
#endif
#if defined(_WIN32) && defined(CAN_RIO_INTERNAL)
  #undef CAN_RIO_INTERNAL
#endif
#if defined(_WIN32) && defined(CAN_RIO_CANIVORE)
  #undef CAN_RIO_CANIVORE
#endif
#if defined(_WIN32) && defined(CAN_COPROCESSOR_CAN)
  #undef CAN_COPROCESSOR_CAN
#endif

  enum {
    CANCoder = 0,
    ENCODERSOURCE_RELATIVE = 0,
    ENCODERSOURCE_ABSOLUTE = 1,
    CAN_RIO_INTERNAL = 0,
    CAN_RIO_CANIVORE = 1,
    CAN_COPROCESSOR_CAN = 2,
  };


  typedef boost::shared_ptr< ::rio_control_node::Encoder_Config_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rio_control_node::Encoder_Config_<ContainerAllocator> const> ConstPtr;

}; // struct Encoder_Config_

typedef ::rio_control_node::Encoder_Config_<std::allocator<void> > Encoder_Config;

typedef boost::shared_ptr< ::rio_control_node::Encoder_Config > Encoder_ConfigPtr;
typedef boost::shared_ptr< ::rio_control_node::Encoder_Config const> Encoder_ConfigConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rio_control_node::Encoder_Config_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rio_control_node::Encoder_Config_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rio_control_node::Encoder_Config_<ContainerAllocator1> & lhs, const ::rio_control_node::Encoder_Config_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.encoder_type == rhs.encoder_type &&
    lhs.sensor_source == rhs.sensor_source &&
    lhs.can_network == rhs.can_network;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rio_control_node::Encoder_Config_<ContainerAllocator1> & lhs, const ::rio_control_node::Encoder_Config_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rio_control_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Encoder_Config_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Encoder_Config_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Encoder_Config_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Encoder_Config_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Encoder_Config_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Encoder_Config_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rio_control_node::Encoder_Config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "815d0c09add4ac47a49ddfe61a20f06c";
  }

  static const char* value(const ::rio_control_node::Encoder_Config_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x815d0c09add4ac47ULL;
  static const uint64_t static_value2 = 0xa49ddfe61a20f06cULL;
};

template<class ContainerAllocator>
struct DataType< ::rio_control_node::Encoder_Config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rio_control_node/Encoder_Config";
  }

  static const char* value(const ::rio_control_node::Encoder_Config_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rio_control_node::Encoder_Config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 CANCoder=0\n"
"\n"
"int8 ENCODERSOURCE_RELATIVE=0\n"
"int8 ENCODERSOURCE_ABSOLUTE=1\n"
"\n"
"int8 CAN_RIO_INTERNAL=0\n"
"int8 CAN_RIO_CANIVORE=1\n"
"int8 CAN_COPROCESSOR_CAN=2\n"
"\n"
"int32 id\n"
"int8 encoder_type\n"
"int8 sensor_source\n"
"int8 can_network\n"
;
  }

  static const char* value(const ::rio_control_node::Encoder_Config_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rio_control_node::Encoder_Config_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.encoder_type);
      stream.next(m.sensor_source);
      stream.next(m.can_network);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Encoder_Config_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rio_control_node::Encoder_Config_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rio_control_node::Encoder_Config_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "encoder_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.encoder_type);
    s << indent << "sensor_source: ";
    Printer<int8_t>::stream(s, indent + "  ", v.sensor_source);
    s << indent << "can_network: ";
    Printer<int8_t>::stream(s, indent + "  ", v.can_network);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIO_CONTROL_NODE_MESSAGE_ENCODER_CONFIG_H
