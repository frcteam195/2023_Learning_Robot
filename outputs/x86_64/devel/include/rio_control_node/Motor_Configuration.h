// Generated by gencpp from file rio_control_node/Motor_Configuration.msg
// DO NOT EDIT!


#ifndef RIO_CONTROL_NODE_MESSAGE_MOTOR_CONFIGURATION_H
#define RIO_CONTROL_NODE_MESSAGE_MOTOR_CONFIGURATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rio_control_node/Motor_Config.h>

namespace rio_control_node
{
template <class ContainerAllocator>
struct Motor_Configuration_
{
  typedef Motor_Configuration_<ContainerAllocator> Type;

  Motor_Configuration_()
    : motors()  {
    }
  Motor_Configuration_(const ContainerAllocator& _alloc)
    : motors(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::rio_control_node::Motor_Config_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rio_control_node::Motor_Config_<ContainerAllocator> >::other >  _motors_type;
  _motors_type motors;





  typedef boost::shared_ptr< ::rio_control_node::Motor_Configuration_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rio_control_node::Motor_Configuration_<ContainerAllocator> const> ConstPtr;

}; // struct Motor_Configuration_

typedef ::rio_control_node::Motor_Configuration_<std::allocator<void> > Motor_Configuration;

typedef boost::shared_ptr< ::rio_control_node::Motor_Configuration > Motor_ConfigurationPtr;
typedef boost::shared_ptr< ::rio_control_node::Motor_Configuration const> Motor_ConfigurationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rio_control_node::Motor_Configuration_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rio_control_node::Motor_Configuration_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rio_control_node::Motor_Configuration_<ContainerAllocator1> & lhs, const ::rio_control_node::Motor_Configuration_<ContainerAllocator2> & rhs)
{
  return lhs.motors == rhs.motors;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rio_control_node::Motor_Configuration_<ContainerAllocator1> & lhs, const ::rio_control_node::Motor_Configuration_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rio_control_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Motor_Configuration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Motor_Configuration_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Motor_Configuration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Motor_Configuration_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Motor_Configuration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Motor_Configuration_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rio_control_node::Motor_Configuration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b4aa30f1c6e967c36fb4276685a52367";
  }

  static const char* value(const ::rio_control_node::Motor_Configuration_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb4aa30f1c6e967c3ULL;
  static const uint64_t static_value2 = 0x6fb4276685a52367ULL;
};

template<class ContainerAllocator>
struct DataType< ::rio_control_node::Motor_Configuration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rio_control_node/Motor_Configuration";
  }

  static const char* value(const ::rio_control_node::Motor_Configuration_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rio_control_node::Motor_Configuration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Motor_Config[] motors\n"
"================================================================================\n"
"MSG: rio_control_node/Motor_Config\n"
"int8 TALON_FX=0\n"
"int8 TALON_SRX=1\n"
"\n"
"int8 MASTER=0\n"
"int8 FAST_MASTER=1\n"
"int8 FOLLOWER=2\n"
"\n"
"int8 NONE=0\n"
"int8 INVERT_MOTOR_OUTPUT=1\n"
"int8 FOLLOW_MASTER=2\n"
"int8 OPPOSE_MASTER=3\n"
"\n"
"int8 LIMITSWITCHSOURCE_FEEDBACKCONNECTOR = 0\n"
"int8 LIMITSWITCHSOURCE_REMOTETALON = 1\n"
"int8 LIMITSWITCHSOURCE_REMOTETALONSRX = 1\n"
"int8 LIMITSWITCHSOURCE_REMOTECANIFIER = 2\n"
"int8 LIMITSWITCHSOURCE_DEACTIVATED = 3\n"
"\n"
"int8 LIMITSWITCHNORMAL_NORMALLYOPEN = 0\n"
"int8 LIMITSWITCHNORMAL_NORMALLYCLOSED = 1\n"
"int8 LIMITSWITCHNORMAL_DISABLED = 2\n"
"\n"
"int8 EEPROM_SETTING=0\n"
"int8 COAST=1\n"
"int8 BRAKE=2\n"
"\n"
"\n"
"int32 id\n"
"uint8 controller_type\n"
"uint8 controller_mode\n"
"float64 kP\n"
"float64 kI\n"
"float64 kD\n"
"float64 kF\n"
"float64 iZone\n"
"float64 max_i_accum\n"
"float64 allowed_closed_loop_error\n"
"float64 max_closed_loop_peak_output\n"
"float64 motion_cruise_velocity\n"
"float64 motion_acceleration\n"
"int32 motion_s_curve_strength\n"
"float64 forward_soft_limit\n"
"bool forward_soft_limit_enable\n"
"float64 reverse_soft_limit\n"
"bool reverse_soft_limit_enable\n"
"float64 feedback_sensor_coefficient\n"
"float64 voltage_compensation_saturation\n"
"bool voltage_compensation_enabled\n"
"uint8 invert_type\n"
"bool sensor_phase_inverted\n"
"uint8 neutral_mode\n"
"float64 open_loop_ramp\n"
"float64 closed_loop_ramp\n"
"Current_Limit_Configuration supply_current_limit_config\n"
"Current_Limit_Configuration stator_current_limit_config\n"
"int8 forward_limit_switch_source\n"
"int8 forward_limit_switch_normal\n"
"int8 reverse_limit_switch_source\n"
"int8 reverse_limit_switch_normal\n"
"float64 peak_output_forward\n"
"float64 peak_output_reverse\n"
"\n"
"================================================================================\n"
"MSG: rio_control_node/Current_Limit_Configuration\n"
"bool enable\n"
"float64 current_limit\n"
"float64 trigger_threshold_current\n"
"float64 trigger_threshold_time\n"
;
  }

  static const char* value(const ::rio_control_node::Motor_Configuration_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rio_control_node::Motor_Configuration_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Motor_Configuration_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rio_control_node::Motor_Configuration_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rio_control_node::Motor_Configuration_<ContainerAllocator>& v)
  {
    s << indent << "motors[]" << std::endl;
    for (size_t i = 0; i < v.motors.size(); ++i)
    {
      s << indent << "  motors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rio_control_node::Motor_Config_<ContainerAllocator> >::stream(s, indent + "    ", v.motors[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIO_CONTROL_NODE_MESSAGE_MOTOR_CONFIGURATION_H
