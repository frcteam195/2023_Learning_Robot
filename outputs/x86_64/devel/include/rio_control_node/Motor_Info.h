// Generated by gencpp from file rio_control_node/Motor_Info.msg
// DO NOT EDIT!


#ifndef RIO_CONTROL_NODE_MESSAGE_MOTOR_INFO_H
#define RIO_CONTROL_NODE_MESSAGE_MOTOR_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rio_control_node
{
template <class ContainerAllocator>
struct Motor_Info_
{
  typedef Motor_Info_<ContainerAllocator> Type;

  Motor_Info_()
    : id(0)
    , sensor_position(0.0)
    , sensor_velocity(0.0)
    , bus_voltage(0.0)
    , bus_current(0.0)
    , stator_current(0.0)
    , forward_limit_closed(false)
    , reverse_limit_closed(false)
    , control_mode(0)
    , commanded_output(0.0)
    , active_trajectory_arbff(0.0)
    , active_trajectory_position(0.0)
    , active_trajectory_velocity(0.0)
    , raw_closed_loop_error(0.0)
    , raw_integral_accum(0.0)
    , raw_error_derivative(0.0)
    , raw_output_percent(0.0)  {
    }
  Motor_Info_(const ContainerAllocator& _alloc)
    : id(0)
    , sensor_position(0.0)
    , sensor_velocity(0.0)
    , bus_voltage(0.0)
    , bus_current(0.0)
    , stator_current(0.0)
    , forward_limit_closed(false)
    , reverse_limit_closed(false)
    , control_mode(0)
    , commanded_output(0.0)
    , active_trajectory_arbff(0.0)
    , active_trajectory_position(0.0)
    , active_trajectory_velocity(0.0)
    , raw_closed_loop_error(0.0)
    , raw_integral_accum(0.0)
    , raw_error_derivative(0.0)
    , raw_output_percent(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef double _sensor_position_type;
  _sensor_position_type sensor_position;

   typedef double _sensor_velocity_type;
  _sensor_velocity_type sensor_velocity;

   typedef double _bus_voltage_type;
  _bus_voltage_type bus_voltage;

   typedef double _bus_current_type;
  _bus_current_type bus_current;

   typedef double _stator_current_type;
  _stator_current_type stator_current;

   typedef uint8_t _forward_limit_closed_type;
  _forward_limit_closed_type forward_limit_closed;

   typedef uint8_t _reverse_limit_closed_type;
  _reverse_limit_closed_type reverse_limit_closed;

   typedef int8_t _control_mode_type;
  _control_mode_type control_mode;

   typedef double _commanded_output_type;
  _commanded_output_type commanded_output;

   typedef double _active_trajectory_arbff_type;
  _active_trajectory_arbff_type active_trajectory_arbff;

   typedef double _active_trajectory_position_type;
  _active_trajectory_position_type active_trajectory_position;

   typedef double _active_trajectory_velocity_type;
  _active_trajectory_velocity_type active_trajectory_velocity;

   typedef double _raw_closed_loop_error_type;
  _raw_closed_loop_error_type raw_closed_loop_error;

   typedef double _raw_integral_accum_type;
  _raw_integral_accum_type raw_integral_accum;

   typedef double _raw_error_derivative_type;
  _raw_error_derivative_type raw_error_derivative;

   typedef double _raw_output_percent_type;
  _raw_output_percent_type raw_output_percent;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PERCENT_OUTPUT)
  #undef PERCENT_OUTPUT
#endif
#if defined(_WIN32) && defined(POSITION)
  #undef POSITION
#endif
#if defined(_WIN32) && defined(VELOCITY)
  #undef VELOCITY
#endif
#if defined(_WIN32) && defined(CURRENT)
  #undef CURRENT
#endif
#if defined(_WIN32) && defined(FOLLOWER)
  #undef FOLLOWER
#endif
#if defined(_WIN32) && defined(MOTION_PROFILE)
  #undef MOTION_PROFILE
#endif
#if defined(_WIN32) && defined(MOTION_MAGIC)
  #undef MOTION_MAGIC
#endif
#if defined(_WIN32) && defined(MOTION_PROFILE_ARC)
  #undef MOTION_PROFILE_ARC
#endif
#if defined(_WIN32) && defined(MUSIC_TONE)
  #undef MUSIC_TONE
#endif
#if defined(_WIN32) && defined(DISABLED)
  #undef DISABLED
#endif

  enum {
    PERCENT_OUTPUT = 0,
    POSITION = 1,
    VELOCITY = 2,
    CURRENT = 3,
    FOLLOWER = 5,
    MOTION_PROFILE = 6,
    MOTION_MAGIC = 7,
    MOTION_PROFILE_ARC = 10,
    MUSIC_TONE = 13,
    DISABLED = 15,
  };


  typedef boost::shared_ptr< ::rio_control_node::Motor_Info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rio_control_node::Motor_Info_<ContainerAllocator> const> ConstPtr;

}; // struct Motor_Info_

typedef ::rio_control_node::Motor_Info_<std::allocator<void> > Motor_Info;

typedef boost::shared_ptr< ::rio_control_node::Motor_Info > Motor_InfoPtr;
typedef boost::shared_ptr< ::rio_control_node::Motor_Info const> Motor_InfoConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rio_control_node::Motor_Info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rio_control_node::Motor_Info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rio_control_node::Motor_Info_<ContainerAllocator1> & lhs, const ::rio_control_node::Motor_Info_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.sensor_position == rhs.sensor_position &&
    lhs.sensor_velocity == rhs.sensor_velocity &&
    lhs.bus_voltage == rhs.bus_voltage &&
    lhs.bus_current == rhs.bus_current &&
    lhs.stator_current == rhs.stator_current &&
    lhs.forward_limit_closed == rhs.forward_limit_closed &&
    lhs.reverse_limit_closed == rhs.reverse_limit_closed &&
    lhs.control_mode == rhs.control_mode &&
    lhs.commanded_output == rhs.commanded_output &&
    lhs.active_trajectory_arbff == rhs.active_trajectory_arbff &&
    lhs.active_trajectory_position == rhs.active_trajectory_position &&
    lhs.active_trajectory_velocity == rhs.active_trajectory_velocity &&
    lhs.raw_closed_loop_error == rhs.raw_closed_loop_error &&
    lhs.raw_integral_accum == rhs.raw_integral_accum &&
    lhs.raw_error_derivative == rhs.raw_error_derivative &&
    lhs.raw_output_percent == rhs.raw_output_percent;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rio_control_node::Motor_Info_<ContainerAllocator1> & lhs, const ::rio_control_node::Motor_Info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rio_control_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Motor_Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Motor_Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Motor_Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Motor_Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Motor_Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Motor_Info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rio_control_node::Motor_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "265cf97c827bb31f3df9e0c261f2ad39";
  }

  static const char* value(const ::rio_control_node::Motor_Info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x265cf97c827bb31fULL;
  static const uint64_t static_value2 = 0x3df9e0c261f2ad39ULL;
};

template<class ContainerAllocator>
struct DataType< ::rio_control_node::Motor_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rio_control_node/Motor_Info";
  }

  static const char* value(const ::rio_control_node::Motor_Info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rio_control_node::Motor_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 PERCENT_OUTPUT=0\n"
"int8 POSITION=1\n"
"int8 VELOCITY=2\n"
"int8 CURRENT=3\n"
"int8 FOLLOWER=5\n"
"int8 MOTION_PROFILE=6\n"
"int8 MOTION_MAGIC=7\n"
"int8 MOTION_PROFILE_ARC=10\n"
"int8 MUSIC_TONE=13\n"
"int8 DISABLED=15\n"
"\n"
"int32 id\n"
"float64 sensor_position\n"
"float64 sensor_velocity\n"
"float64 bus_voltage\n"
"float64 bus_current\n"
"float64 stator_current\n"
"bool forward_limit_closed\n"
"bool reverse_limit_closed\n"
"int8 control_mode\n"
"float64 commanded_output\n"
"float64 active_trajectory_arbff\n"
"float64 active_trajectory_position\n"
"float64 active_trajectory_velocity\n"
"float64 raw_closed_loop_error\n"
"float64 raw_integral_accum\n"
"float64 raw_error_derivative\n"
"float64 raw_output_percent\n"
;
  }

  static const char* value(const ::rio_control_node::Motor_Info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rio_control_node::Motor_Info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.sensor_position);
      stream.next(m.sensor_velocity);
      stream.next(m.bus_voltage);
      stream.next(m.bus_current);
      stream.next(m.stator_current);
      stream.next(m.forward_limit_closed);
      stream.next(m.reverse_limit_closed);
      stream.next(m.control_mode);
      stream.next(m.commanded_output);
      stream.next(m.active_trajectory_arbff);
      stream.next(m.active_trajectory_position);
      stream.next(m.active_trajectory_velocity);
      stream.next(m.raw_closed_loop_error);
      stream.next(m.raw_integral_accum);
      stream.next(m.raw_error_derivative);
      stream.next(m.raw_output_percent);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Motor_Info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rio_control_node::Motor_Info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rio_control_node::Motor_Info_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "sensor_position: ";
    Printer<double>::stream(s, indent + "  ", v.sensor_position);
    s << indent << "sensor_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.sensor_velocity);
    s << indent << "bus_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.bus_voltage);
    s << indent << "bus_current: ";
    Printer<double>::stream(s, indent + "  ", v.bus_current);
    s << indent << "stator_current: ";
    Printer<double>::stream(s, indent + "  ", v.stator_current);
    s << indent << "forward_limit_closed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.forward_limit_closed);
    s << indent << "reverse_limit_closed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reverse_limit_closed);
    s << indent << "control_mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "commanded_output: ";
    Printer<double>::stream(s, indent + "  ", v.commanded_output);
    s << indent << "active_trajectory_arbff: ";
    Printer<double>::stream(s, indent + "  ", v.active_trajectory_arbff);
    s << indent << "active_trajectory_position: ";
    Printer<double>::stream(s, indent + "  ", v.active_trajectory_position);
    s << indent << "active_trajectory_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.active_trajectory_velocity);
    s << indent << "raw_closed_loop_error: ";
    Printer<double>::stream(s, indent + "  ", v.raw_closed_loop_error);
    s << indent << "raw_integral_accum: ";
    Printer<double>::stream(s, indent + "  ", v.raw_integral_accum);
    s << indent << "raw_error_derivative: ";
    Printer<double>::stream(s, indent + "  ", v.raw_error_derivative);
    s << indent << "raw_output_percent: ";
    Printer<double>::stream(s, indent + "  ", v.raw_output_percent);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIO_CONTROL_NODE_MESSAGE_MOTOR_INFO_H
