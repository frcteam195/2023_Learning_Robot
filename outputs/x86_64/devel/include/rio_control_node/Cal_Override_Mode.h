// Generated by gencpp from file rio_control_node/Cal_Override_Mode.msg
// DO NOT EDIT!


#ifndef RIO_CONTROL_NODE_MESSAGE_CAL_OVERRIDE_MODE_H
#define RIO_CONTROL_NODE_MESSAGE_CAL_OVERRIDE_MODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rio_control_node
{
template <class ContainerAllocator>
struct Cal_Override_Mode_
{
  typedef Cal_Override_Mode_<ContainerAllocator> Type;

  Cal_Override_Mode_()
    : operation_mode(0)  {
    }
  Cal_Override_Mode_(const ContainerAllocator& _alloc)
    : operation_mode(0)  {
  (void)_alloc;
    }



   typedef uint8_t _operation_mode_type;
  _operation_mode_type operation_mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NORMAL_OPERATION)
  #undef NORMAL_OPERATION
#endif
#if defined(_WIN32) && defined(TUNING_PIDS)
  #undef TUNING_PIDS
#endif
#if defined(_WIN32) && defined(TEST_SYSTEM)
  #undef TEST_SYSTEM
#endif

  enum {
    NORMAL_OPERATION = 0,
    TUNING_PIDS = 1,
    TEST_SYSTEM = 2,
  };


  typedef boost::shared_ptr< ::rio_control_node::Cal_Override_Mode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rio_control_node::Cal_Override_Mode_<ContainerAllocator> const> ConstPtr;

}; // struct Cal_Override_Mode_

typedef ::rio_control_node::Cal_Override_Mode_<std::allocator<void> > Cal_Override_Mode;

typedef boost::shared_ptr< ::rio_control_node::Cal_Override_Mode > Cal_Override_ModePtr;
typedef boost::shared_ptr< ::rio_control_node::Cal_Override_Mode const> Cal_Override_ModeConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rio_control_node::Cal_Override_Mode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rio_control_node::Cal_Override_Mode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rio_control_node::Cal_Override_Mode_<ContainerAllocator1> & lhs, const ::rio_control_node::Cal_Override_Mode_<ContainerAllocator2> & rhs)
{
  return lhs.operation_mode == rhs.operation_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rio_control_node::Cal_Override_Mode_<ContainerAllocator1> & lhs, const ::rio_control_node::Cal_Override_Mode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rio_control_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Cal_Override_Mode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Cal_Override_Mode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Cal_Override_Mode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Cal_Override_Mode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Cal_Override_Mode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Cal_Override_Mode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rio_control_node::Cal_Override_Mode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d57714a99bddaa4c7198d1c8f8178ec";
  }

  static const char* value(const ::rio_control_node::Cal_Override_Mode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d57714a99bddaa4ULL;
  static const uint64_t static_value2 = 0xc7198d1c8f8178ecULL;
};

template<class ContainerAllocator>
struct DataType< ::rio_control_node::Cal_Override_Mode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rio_control_node/Cal_Override_Mode";
  }

  static const char* value(const ::rio_control_node::Cal_Override_Mode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rio_control_node::Cal_Override_Mode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 NORMAL_OPERATION=0\n"
"int8 TUNING_PIDS=1\n"
"int8 TEST_SYSTEM=2\n"
"\n"
"uint8 operation_mode\n"
;
  }

  static const char* value(const ::rio_control_node::Cal_Override_Mode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rio_control_node::Cal_Override_Mode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.operation_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Cal_Override_Mode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rio_control_node::Cal_Override_Mode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rio_control_node::Cal_Override_Mode_<ContainerAllocator>& v)
  {
    s << indent << "operation_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.operation_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIO_CONTROL_NODE_MESSAGE_CAL_OVERRIDE_MODE_H
