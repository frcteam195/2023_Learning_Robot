// Generated by gencpp from file rio_control_node/Joystick.msg
// DO NOT EDIT!


#ifndef RIO_CONTROL_NODE_MESSAGE_JOYSTICK_H
#define RIO_CONTROL_NODE_MESSAGE_JOYSTICK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rio_control_node
{
template <class ContainerAllocator>
struct Joystick_
{
  typedef Joystick_<ContainerAllocator> Type;

  Joystick_()
    : index(0)
    , axes()
    , buttons()
    , povs()  {
    }
  Joystick_(const ContainerAllocator& _alloc)
    : index(0)
    , axes(_alloc)
    , buttons(_alloc)
    , povs(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _index_type;
  _index_type index;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _axes_type;
  _axes_type axes;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _buttons_type;
  _buttons_type buttons;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _povs_type;
  _povs_type povs;





  typedef boost::shared_ptr< ::rio_control_node::Joystick_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rio_control_node::Joystick_<ContainerAllocator> const> ConstPtr;

}; // struct Joystick_

typedef ::rio_control_node::Joystick_<std::allocator<void> > Joystick;

typedef boost::shared_ptr< ::rio_control_node::Joystick > JoystickPtr;
typedef boost::shared_ptr< ::rio_control_node::Joystick const> JoystickConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rio_control_node::Joystick_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rio_control_node::Joystick_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rio_control_node::Joystick_<ContainerAllocator1> & lhs, const ::rio_control_node::Joystick_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.axes == rhs.axes &&
    lhs.buttons == rhs.buttons &&
    lhs.povs == rhs.povs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rio_control_node::Joystick_<ContainerAllocator1> & lhs, const ::rio_control_node::Joystick_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rio_control_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Joystick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Joystick_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Joystick_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Joystick_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Joystick_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Joystick_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rio_control_node::Joystick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5893242f1e22e9870ec0dee6bf0bca11";
  }

  static const char* value(const ::rio_control_node::Joystick_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5893242f1e22e987ULL;
  static const uint64_t static_value2 = 0x0ec0dee6bf0bca11ULL;
};

template<class ContainerAllocator>
struct DataType< ::rio_control_node::Joystick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rio_control_node/Joystick";
  }

  static const char* value(const ::rio_control_node::Joystick_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rio_control_node::Joystick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 index\n"
"float32[] axes\n"
"uint8[] buttons\n"
"int16[] povs\n"
;
  }

  static const char* value(const ::rio_control_node::Joystick_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rio_control_node::Joystick_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.axes);
      stream.next(m.buttons);
      stream.next(m.povs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Joystick_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rio_control_node::Joystick_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rio_control_node::Joystick_<ContainerAllocator>& v)
  {
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
    s << indent << "axes[]" << std::endl;
    for (size_t i = 0; i < v.axes.size(); ++i)
    {
      s << indent << "  axes[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.axes[i]);
    }
    s << indent << "buttons[]" << std::endl;
    for (size_t i = 0; i < v.buttons.size(); ++i)
    {
      s << indent << "  buttons[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.buttons[i]);
    }
    s << indent << "povs[]" << std::endl;
    for (size_t i = 0; i < v.povs.size(); ++i)
    {
      s << indent << "  povs[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.povs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIO_CONTROL_NODE_MESSAGE_JOYSTICK_H
