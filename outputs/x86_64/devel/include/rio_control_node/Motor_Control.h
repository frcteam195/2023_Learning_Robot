// Generated by gencpp from file rio_control_node/Motor_Control.msg
// DO NOT EDIT!


#ifndef RIO_CONTROL_NODE_MESSAGE_MOTOR_CONTROL_H
#define RIO_CONTROL_NODE_MESSAGE_MOTOR_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rio_control_node/Motor.h>

namespace rio_control_node
{
template <class ContainerAllocator>
struct Motor_Control_
{
  typedef Motor_Control_<ContainerAllocator> Type;

  Motor_Control_()
    : motors()  {
    }
  Motor_Control_(const ContainerAllocator& _alloc)
    : motors(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::rio_control_node::Motor_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rio_control_node::Motor_<ContainerAllocator> >::other >  _motors_type;
  _motors_type motors;





  typedef boost::shared_ptr< ::rio_control_node::Motor_Control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rio_control_node::Motor_Control_<ContainerAllocator> const> ConstPtr;

}; // struct Motor_Control_

typedef ::rio_control_node::Motor_Control_<std::allocator<void> > Motor_Control;

typedef boost::shared_ptr< ::rio_control_node::Motor_Control > Motor_ControlPtr;
typedef boost::shared_ptr< ::rio_control_node::Motor_Control const> Motor_ControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rio_control_node::Motor_Control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rio_control_node::Motor_Control_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rio_control_node::Motor_Control_<ContainerAllocator1> & lhs, const ::rio_control_node::Motor_Control_<ContainerAllocator2> & rhs)
{
  return lhs.motors == rhs.motors;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rio_control_node::Motor_Control_<ContainerAllocator1> & lhs, const ::rio_control_node::Motor_Control_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rio_control_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Motor_Control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Motor_Control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Motor_Control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Motor_Control_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Motor_Control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Motor_Control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rio_control_node::Motor_Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3cf41406b72ffdc820cf64897de2fb84";
  }

  static const char* value(const ::rio_control_node::Motor_Control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3cf41406b72ffdc8ULL;
  static const uint64_t static_value2 = 0x20cf64897de2fb84ULL;
};

template<class ContainerAllocator>
struct DataType< ::rio_control_node::Motor_Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rio_control_node/Motor_Control";
  }

  static const char* value(const ::rio_control_node::Motor_Control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rio_control_node::Motor_Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Motor[] motors\n"
"================================================================================\n"
"MSG: rio_control_node/Motor\n"
"int8 TALON_FX = 0\n"
"int8 TALON_SRX = 1\n"
"\n"
"int8 PERCENT_OUTPUT=0\n"
"int8 POSITION=1\n"
"int8 VELOCITY=2\n"
"int8 CURRENT=3\n"
"int8 FOLLOWER=5\n"
"int8 MOTION_PROFILE=6\n"
"int8 MOTION_MAGIC=7\n"
"int8 MOTION_PROFILE_ARC=10\n"
"int8 MUSIC_TONE=13\n"
"int8 DISABLED=15\n"
"\n"
"int32 id\n"
"int8 controller_type\n"
"int8 control_mode\n"
"float64 output_value\n"
"float64 arbitrary_feedforward\n"
;
  }

  static const char* value(const ::rio_control_node::Motor_Control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rio_control_node::Motor_Control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Motor_Control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rio_control_node::Motor_Control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rio_control_node::Motor_Control_<ContainerAllocator>& v)
  {
    s << indent << "motors[]" << std::endl;
    for (size_t i = 0; i < v.motors.size(); ++i)
    {
      s << indent << "  motors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rio_control_node::Motor_<ContainerAllocator> >::stream(s, indent + "    ", v.motors[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIO_CONTROL_NODE_MESSAGE_MOTOR_CONTROL_H
