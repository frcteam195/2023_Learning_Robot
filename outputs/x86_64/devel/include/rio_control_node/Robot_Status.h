// Generated by gencpp from file rio_control_node/Robot_Status.msg
// DO NOT EDIT!


#ifndef RIO_CONTROL_NODE_MESSAGE_ROBOT_STATUS_H
#define RIO_CONTROL_NODE_MESSAGE_ROBOT_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rio_control_node
{
template <class ContainerAllocator>
struct Robot_Status_
{
  typedef Robot_Status_<ContainerAllocator> Type;

  Robot_Status_()
    : robot_state(0)
    , alliance(0)
    , match_time(0.0)
    , game_data()
    , selected_auto(0)  {
    }
  Robot_Status_(const ContainerAllocator& _alloc)
    : robot_state(0)
    , alliance(0)
    , match_time(0.0)
    , game_data(_alloc)
    , selected_auto(0)  {
  (void)_alloc;
    }



   typedef int8_t _robot_state_type;
  _robot_state_type robot_state;

   typedef int8_t _alliance_type;
  _alliance_type alliance;

   typedef double _match_time_type;
  _match_time_type match_time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _game_data_type;
  _game_data_type game_data;

   typedef int32_t _selected_auto_type;
  _selected_auto_type selected_auto;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DISABLED)
  #undef DISABLED
#endif
#if defined(_WIN32) && defined(TELEOP)
  #undef TELEOP
#endif
#if defined(_WIN32) && defined(AUTONOMOUS)
  #undef AUTONOMOUS
#endif
#if defined(_WIN32) && defined(TEST)
  #undef TEST
#endif
#if defined(_WIN32) && defined(RED)
  #undef RED
#endif
#if defined(_WIN32) && defined(BLUE)
  #undef BLUE
#endif

  enum {
    DISABLED = 0,
    TELEOP = 1,
    AUTONOMOUS = 2,
    TEST = 3,
    RED = 0,
    BLUE = 1,
  };


  typedef boost::shared_ptr< ::rio_control_node::Robot_Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rio_control_node::Robot_Status_<ContainerAllocator> const> ConstPtr;

}; // struct Robot_Status_

typedef ::rio_control_node::Robot_Status_<std::allocator<void> > Robot_Status;

typedef boost::shared_ptr< ::rio_control_node::Robot_Status > Robot_StatusPtr;
typedef boost::shared_ptr< ::rio_control_node::Robot_Status const> Robot_StatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rio_control_node::Robot_Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rio_control_node::Robot_Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rio_control_node::Robot_Status_<ContainerAllocator1> & lhs, const ::rio_control_node::Robot_Status_<ContainerAllocator2> & rhs)
{
  return lhs.robot_state == rhs.robot_state &&
    lhs.alliance == rhs.alliance &&
    lhs.match_time == rhs.match_time &&
    lhs.game_data == rhs.game_data &&
    lhs.selected_auto == rhs.selected_auto;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rio_control_node::Robot_Status_<ContainerAllocator1> & lhs, const ::rio_control_node::Robot_Status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rio_control_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Robot_Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Robot_Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Robot_Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Robot_Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Robot_Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Robot_Status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rio_control_node::Robot_Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7a9bfc10295848644256ecb78eda2415";
  }

  static const char* value(const ::rio_control_node::Robot_Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7a9bfc1029584864ULL;
  static const uint64_t static_value2 = 0x4256ecb78eda2415ULL;
};

template<class ContainerAllocator>
struct DataType< ::rio_control_node::Robot_Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rio_control_node/Robot_Status";
  }

  static const char* value(const ::rio_control_node::Robot_Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rio_control_node::Robot_Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Enumeration for Robot State\n"
"int8 DISABLED=0\n"
"int8 TELEOP=1\n"
"int8 AUTONOMOUS=2\n"
"int8 TEST=3\n"
"\n"
"# Enumeration for Alliance\n"
"int8 RED=0\n"
"int8 BLUE=1\n"
"\n"
"int8 robot_state\n"
"int8 alliance\n"
"float64 match_time\n"
"string game_data\n"
"int32 selected_auto\n"
;
  }

  static const char* value(const ::rio_control_node::Robot_Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rio_control_node::Robot_Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_state);
      stream.next(m.alliance);
      stream.next(m.match_time);
      stream.next(m.game_data);
      stream.next(m.selected_auto);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Robot_Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rio_control_node::Robot_Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rio_control_node::Robot_Status_<ContainerAllocator>& v)
  {
    s << indent << "robot_state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.robot_state);
    s << indent << "alliance: ";
    Printer<int8_t>::stream(s, indent + "  ", v.alliance);
    s << indent << "match_time: ";
    Printer<double>::stream(s, indent + "  ", v.match_time);
    s << indent << "game_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.game_data);
    s << indent << "selected_auto: ";
    Printer<int32_t>::stream(s, indent + "  ", v.selected_auto);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIO_CONTROL_NODE_MESSAGE_ROBOT_STATUS_H
