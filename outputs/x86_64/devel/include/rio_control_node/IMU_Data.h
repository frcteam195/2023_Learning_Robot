// Generated by gencpp from file rio_control_node/IMU_Data.msg
// DO NOT EDIT!


#ifndef RIO_CONTROL_NODE_MESSAGE_IMU_DATA_H
#define RIO_CONTROL_NODE_MESSAGE_IMU_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rio_control_node/IMU_Sensor_Data.h>

namespace rio_control_node
{
template <class ContainerAllocator>
struct IMU_Data_
{
  typedef IMU_Data_<ContainerAllocator> Type;

  IMU_Data_()
    : imuData()  {
    }
  IMU_Data_(const ContainerAllocator& _alloc)
    : imuData(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::rio_control_node::IMU_Sensor_Data_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rio_control_node::IMU_Sensor_Data_<ContainerAllocator> >::other >  _imuData_type;
  _imuData_type imuData;





  typedef boost::shared_ptr< ::rio_control_node::IMU_Data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rio_control_node::IMU_Data_<ContainerAllocator> const> ConstPtr;

}; // struct IMU_Data_

typedef ::rio_control_node::IMU_Data_<std::allocator<void> > IMU_Data;

typedef boost::shared_ptr< ::rio_control_node::IMU_Data > IMU_DataPtr;
typedef boost::shared_ptr< ::rio_control_node::IMU_Data const> IMU_DataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rio_control_node::IMU_Data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rio_control_node::IMU_Data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rio_control_node::IMU_Data_<ContainerAllocator1> & lhs, const ::rio_control_node::IMU_Data_<ContainerAllocator2> & rhs)
{
  return lhs.imuData == rhs.imuData;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rio_control_node::IMU_Data_<ContainerAllocator1> & lhs, const ::rio_control_node::IMU_Data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rio_control_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::IMU_Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::IMU_Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::IMU_Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::IMU_Data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::IMU_Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::IMU_Data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rio_control_node::IMU_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db308b5f7c3a2dfbebaf919da37ee68f";
  }

  static const char* value(const ::rio_control_node::IMU_Data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb308b5f7c3a2dfbULL;
  static const uint64_t static_value2 = 0xebaf919da37ee68fULL;
};

template<class ContainerAllocator>
struct DataType< ::rio_control_node::IMU_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rio_control_node/IMU_Data";
  }

  static const char* value(const ::rio_control_node::IMU_Data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rio_control_node::IMU_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "IMU_Sensor_Data[] imuData\n"
"================================================================================\n"
"MSG: rio_control_node/IMU_Sensor_Data\n"
"float64 yaw\n"
"float64 pitch\n"
"float64 roll\n"
"float64 yawrate\n"
;
  }

  static const char* value(const ::rio_control_node::IMU_Data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rio_control_node::IMU_Data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.imuData);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IMU_Data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rio_control_node::IMU_Data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rio_control_node::IMU_Data_<ContainerAllocator>& v)
  {
    s << indent << "imuData[]" << std::endl;
    for (size_t i = 0; i < v.imuData.size(); ++i)
    {
      s << indent << "  imuData[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rio_control_node::IMU_Sensor_Data_<ContainerAllocator> >::stream(s, indent + "    ", v.imuData[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIO_CONTROL_NODE_MESSAGE_IMU_DATA_H
