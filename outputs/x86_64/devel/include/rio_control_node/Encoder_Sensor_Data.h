// Generated by gencpp from file rio_control_node/Encoder_Sensor_Data.msg
// DO NOT EDIT!


#ifndef RIO_CONTROL_NODE_MESSAGE_ENCODER_SENSOR_DATA_H
#define RIO_CONTROL_NODE_MESSAGE_ENCODER_SENSOR_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rio_control_node
{
template <class ContainerAllocator>
struct Encoder_Sensor_Data_
{
  typedef Encoder_Sensor_Data_<ContainerAllocator> Type;

  Encoder_Sensor_Data_()
    : id(0)
    , position(0.0)
    , velocity(0.0)
    , faulted(false)  {
    }
  Encoder_Sensor_Data_(const ContainerAllocator& _alloc)
    : id(0)
    , position(0.0)
    , velocity(0.0)
    , faulted(false)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef double _position_type;
  _position_type position;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef uint8_t _faulted_type;
  _faulted_type faulted;





  typedef boost::shared_ptr< ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator> const> ConstPtr;

}; // struct Encoder_Sensor_Data_

typedef ::rio_control_node::Encoder_Sensor_Data_<std::allocator<void> > Encoder_Sensor_Data;

typedef boost::shared_ptr< ::rio_control_node::Encoder_Sensor_Data > Encoder_Sensor_DataPtr;
typedef boost::shared_ptr< ::rio_control_node::Encoder_Sensor_Data const> Encoder_Sensor_DataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator1> & lhs, const ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.faulted == rhs.faulted;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator1> & lhs, const ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rio_control_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c3bed962d7d45db44383d6c87960d21";
  }

  static const char* value(const ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c3bed962d7d45dbULL;
  static const uint64_t static_value2 = 0x44383d6c87960d21ULL;
};

template<class ContainerAllocator>
struct DataType< ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rio_control_node/Encoder_Sensor_Data";
  }

  static const char* value(const ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"float64 position\n"
"float64 velocity\n"
"bool faulted\n"
;
  }

  static const char* value(const ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.faulted);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Encoder_Sensor_Data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rio_control_node::Encoder_Sensor_Data_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "faulted: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.faulted);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIO_CONTROL_NODE_MESSAGE_ENCODER_SENSOR_DATA_H
