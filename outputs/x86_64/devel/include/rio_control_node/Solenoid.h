// Generated by gencpp from file rio_control_node/Solenoid.msg
// DO NOT EDIT!


#ifndef RIO_CONTROL_NODE_MESSAGE_SOLENOID_H
#define RIO_CONTROL_NODE_MESSAGE_SOLENOID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rio_control_node
{
template <class ContainerAllocator>
struct Solenoid_
{
  typedef Solenoid_<ContainerAllocator> Type;

  Solenoid_()
    : id(0)
    , solenoid_type(0)
    , module_type(0)
    , output_value(0)  {
    }
  Solenoid_(const ContainerAllocator& _alloc)
    : id(0)
    , solenoid_type(0)
    , module_type(0)
    , output_value(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int8_t _solenoid_type_type;
  _solenoid_type_type solenoid_type;

   typedef int8_t _module_type_type;
  _module_type_type module_type;

   typedef int8_t _output_value_type;
  _output_value_type output_value;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SINGLE)
  #undef SINGLE
#endif
#if defined(_WIN32) && defined(DOUBLE)
  #undef DOUBLE
#endif
#if defined(_WIN32) && defined(CTREPCM)
  #undef CTREPCM
#endif
#if defined(_WIN32) && defined(REVPH)
  #undef REVPH
#endif
#if defined(_WIN32) && defined(OFF)
  #undef OFF
#endif
#if defined(_WIN32) && defined(ON)
  #undef ON
#endif
#if defined(_WIN32) && defined(FORWARD)
  #undef FORWARD
#endif
#if defined(_WIN32) && defined(REVERSE)
  #undef REVERSE
#endif

  enum {
    SINGLE = 0,
    DOUBLE = 1,
    CTREPCM = 0,
    REVPH = 1,
    OFF = 0,
    ON = 1,
    FORWARD = 1,
    REVERSE = 2,
  };


  typedef boost::shared_ptr< ::rio_control_node::Solenoid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rio_control_node::Solenoid_<ContainerAllocator> const> ConstPtr;

}; // struct Solenoid_

typedef ::rio_control_node::Solenoid_<std::allocator<void> > Solenoid;

typedef boost::shared_ptr< ::rio_control_node::Solenoid > SolenoidPtr;
typedef boost::shared_ptr< ::rio_control_node::Solenoid const> SolenoidConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rio_control_node::Solenoid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rio_control_node::Solenoid_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rio_control_node::Solenoid_<ContainerAllocator1> & lhs, const ::rio_control_node::Solenoid_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.solenoid_type == rhs.solenoid_type &&
    lhs.module_type == rhs.module_type &&
    lhs.output_value == rhs.output_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rio_control_node::Solenoid_<ContainerAllocator1> & lhs, const ::rio_control_node::Solenoid_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rio_control_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Solenoid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rio_control_node::Solenoid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Solenoid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rio_control_node::Solenoid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Solenoid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rio_control_node::Solenoid_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rio_control_node::Solenoid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e66992c16f72ecd153b3e0f4471a2d32";
  }

  static const char* value(const ::rio_control_node::Solenoid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe66992c16f72ecd1ULL;
  static const uint64_t static_value2 = 0x53b3e0f4471a2d32ULL;
};

template<class ContainerAllocator>
struct DataType< ::rio_control_node::Solenoid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rio_control_node/Solenoid";
  }

  static const char* value(const ::rio_control_node::Solenoid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rio_control_node::Solenoid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 SINGLE = 0\n"
"int8 DOUBLE = 1\n"
"\n"
"int8 CTREPCM = 0\n"
"int8 REVPH = 1\n"
"\n"
"int8 OFF = 0\n"
"int8 ON = 1\n"
"int8 FORWARD = 1\n"
"int8 REVERSE = 2\n"
"\n"
"int32 id\n"
"int8 solenoid_type\n"
"int8 module_type\n"
"int8 output_value\n"
;
  }

  static const char* value(const ::rio_control_node::Solenoid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rio_control_node::Solenoid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.solenoid_type);
      stream.next(m.module_type);
      stream.next(m.output_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Solenoid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rio_control_node::Solenoid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rio_control_node::Solenoid_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "solenoid_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.solenoid_type);
    s << indent << "module_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.module_type);
    s << indent << "output_value: ";
    Printer<int8_t>::stream(s, indent + "  ", v.output_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIO_CONTROL_NODE_MESSAGE_SOLENOID_H
