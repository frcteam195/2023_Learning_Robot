// Generated by gencpp from file ck_utilities_node/TestMessage.msg
// DO NOT EDIT!


#ifndef CK_UTILITIES_NODE_MESSAGE_TESTMESSAGE_H
#define CK_UTILITIES_NODE_MESSAGE_TESTMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ck_utilities_node
{
template <class ContainerAllocator>
struct TestMessage_
{
  typedef TestMessage_<ContainerAllocator> Type;

  TestMessage_()
    : test_data()  {
    }
  TestMessage_(const ContainerAllocator& _alloc)
    : test_data(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _test_data_type;
  _test_data_type test_data;





  typedef boost::shared_ptr< ::ck_utilities_node::TestMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ck_utilities_node::TestMessage_<ContainerAllocator> const> ConstPtr;

}; // struct TestMessage_

typedef ::ck_utilities_node::TestMessage_<std::allocator<void> > TestMessage;

typedef boost::shared_ptr< ::ck_utilities_node::TestMessage > TestMessagePtr;
typedef boost::shared_ptr< ::ck_utilities_node::TestMessage const> TestMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ck_utilities_node::TestMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ck_utilities_node::TestMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ck_utilities_node::TestMessage_<ContainerAllocator1> & lhs, const ::ck_utilities_node::TestMessage_<ContainerAllocator2> & rhs)
{
  return lhs.test_data == rhs.test_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ck_utilities_node::TestMessage_<ContainerAllocator1> & lhs, const ::ck_utilities_node::TestMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ck_utilities_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ck_utilities_node::TestMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ck_utilities_node::TestMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ck_utilities_node::TestMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ck_utilities_node::TestMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ck_utilities_node::TestMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ck_utilities_node::TestMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ck_utilities_node::TestMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cf0aecee599e5d2b48dbd050d7c9f6fb";
  }

  static const char* value(const ::ck_utilities_node::TestMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcf0aecee599e5d2bULL;
  static const uint64_t static_value2 = 0x48dbd050d7c9f6fbULL;
};

template<class ContainerAllocator>
struct DataType< ::ck_utilities_node::TestMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ck_utilities_node/TestMessage";
  }

  static const char* value(const ::ck_utilities_node::TestMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ck_utilities_node::TestMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string test_data\n"
;
  }

  static const char* value(const ::ck_utilities_node::TestMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ck_utilities_node::TestMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.test_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TestMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ck_utilities_node::TestMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ck_utilities_node::TestMessage_<ContainerAllocator>& v)
  {
    s << indent << "test_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.test_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CK_UTILITIES_NODE_MESSAGE_TESTMESSAGE_H
