// Generated by gencpp from file network_tables_node/NTGetDoubleResponse.msg
// DO NOT EDIT!


#ifndef NETWORK_TABLES_NODE_MESSAGE_NTGETDOUBLERESPONSE_H
#define NETWORK_TABLES_NODE_MESSAGE_NTGETDOUBLERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace network_tables_node
{
template <class ContainerAllocator>
struct NTGetDoubleResponse_
{
  typedef NTGetDoubleResponse_<ContainerAllocator> Type;

  NTGetDoubleResponse_()
    : output(0.0)
    , last_valid()  {
    }
  NTGetDoubleResponse_(const ContainerAllocator& _alloc)
    : output(0.0)
    , last_valid()  {
  (void)_alloc;
    }



   typedef double _output_type;
  _output_type output;

   typedef ros::Time _last_valid_type;
  _last_valid_type last_valid;





  typedef boost::shared_ptr< ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator> const> ConstPtr;

}; // struct NTGetDoubleResponse_

typedef ::network_tables_node::NTGetDoubleResponse_<std::allocator<void> > NTGetDoubleResponse;

typedef boost::shared_ptr< ::network_tables_node::NTGetDoubleResponse > NTGetDoubleResponsePtr;
typedef boost::shared_ptr< ::network_tables_node::NTGetDoubleResponse const> NTGetDoubleResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator1> & lhs, const ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator2> & rhs)
{
  return lhs.output == rhs.output &&
    lhs.last_valid == rhs.last_valid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator1> & lhs, const ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace network_tables_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e94ea24808d21225f848d0dfbe3f6d39";
  }

  static const char* value(const ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe94ea24808d21225ULL;
  static const uint64_t static_value2 = 0xf848d0dfbe3f6d39ULL;
};

template<class ContainerAllocator>
struct DataType< ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "network_tables_node/NTGetDoubleResponse";
  }

  static const char* value(const ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Outputs\n"
"float64 output\n"
"time last_valid\n"
;
  }

  static const char* value(const ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.output);
      stream.next(m.last_valid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NTGetDoubleResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::network_tables_node::NTGetDoubleResponse_<ContainerAllocator>& v)
  {
    s << indent << "output: ";
    Printer<double>::stream(s, indent + "  ", v.output);
    s << indent << "last_valid: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.last_valid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NETWORK_TABLES_NODE_MESSAGE_NTGETDOUBLERESPONSE_H
