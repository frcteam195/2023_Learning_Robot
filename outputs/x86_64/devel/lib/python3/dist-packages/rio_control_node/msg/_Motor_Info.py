# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rio_control_node/Motor_Info.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Motor_Info(genpy.Message):
  _md5sum = "265cf97c827bb31f3df9e0c261f2ad39"
  _type = "rio_control_node/Motor_Info"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int8 PERCENT_OUTPUT=0
int8 POSITION=1
int8 VELOCITY=2
int8 CURRENT=3
int8 FOLLOWER=5
int8 MOTION_PROFILE=6
int8 MOTION_MAGIC=7
int8 MOTION_PROFILE_ARC=10
int8 MUSIC_TONE=13
int8 DISABLED=15

int32 id
float64 sensor_position
float64 sensor_velocity
float64 bus_voltage
float64 bus_current
float64 stator_current
bool forward_limit_closed
bool reverse_limit_closed
int8 control_mode
float64 commanded_output
float64 active_trajectory_arbff
float64 active_trajectory_position
float64 active_trajectory_velocity
float64 raw_closed_loop_error
float64 raw_integral_accum
float64 raw_error_derivative
float64 raw_output_percent"""
  # Pseudo-constants
  PERCENT_OUTPUT = 0
  POSITION = 1
  VELOCITY = 2
  CURRENT = 3
  FOLLOWER = 5
  MOTION_PROFILE = 6
  MOTION_MAGIC = 7
  MOTION_PROFILE_ARC = 10
  MUSIC_TONE = 13
  DISABLED = 15

  __slots__ = ['id','sensor_position','sensor_velocity','bus_voltage','bus_current','stator_current','forward_limit_closed','reverse_limit_closed','control_mode','commanded_output','active_trajectory_arbff','active_trajectory_position','active_trajectory_velocity','raw_closed_loop_error','raw_integral_accum','raw_error_derivative','raw_output_percent']
  _slot_types = ['int32','float64','float64','float64','float64','float64','bool','bool','int8','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,sensor_position,sensor_velocity,bus_voltage,bus_current,stator_current,forward_limit_closed,reverse_limit_closed,control_mode,commanded_output,active_trajectory_arbff,active_trajectory_position,active_trajectory_velocity,raw_closed_loop_error,raw_integral_accum,raw_error_derivative,raw_output_percent

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Motor_Info, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.sensor_position is None:
        self.sensor_position = 0.
      if self.sensor_velocity is None:
        self.sensor_velocity = 0.
      if self.bus_voltage is None:
        self.bus_voltage = 0.
      if self.bus_current is None:
        self.bus_current = 0.
      if self.stator_current is None:
        self.stator_current = 0.
      if self.forward_limit_closed is None:
        self.forward_limit_closed = False
      if self.reverse_limit_closed is None:
        self.reverse_limit_closed = False
      if self.control_mode is None:
        self.control_mode = 0
      if self.commanded_output is None:
        self.commanded_output = 0.
      if self.active_trajectory_arbff is None:
        self.active_trajectory_arbff = 0.
      if self.active_trajectory_position is None:
        self.active_trajectory_position = 0.
      if self.active_trajectory_velocity is None:
        self.active_trajectory_velocity = 0.
      if self.raw_closed_loop_error is None:
        self.raw_closed_loop_error = 0.
      if self.raw_integral_accum is None:
        self.raw_integral_accum = 0.
      if self.raw_error_derivative is None:
        self.raw_error_derivative = 0.
      if self.raw_output_percent is None:
        self.raw_output_percent = 0.
    else:
      self.id = 0
      self.sensor_position = 0.
      self.sensor_velocity = 0.
      self.bus_voltage = 0.
      self.bus_current = 0.
      self.stator_current = 0.
      self.forward_limit_closed = False
      self.reverse_limit_closed = False
      self.control_mode = 0
      self.commanded_output = 0.
      self.active_trajectory_arbff = 0.
      self.active_trajectory_position = 0.
      self.active_trajectory_velocity = 0.
      self.raw_closed_loop_error = 0.
      self.raw_integral_accum = 0.
      self.raw_error_derivative = 0.
      self.raw_output_percent = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i5d2Bb8d().pack(_x.id, _x.sensor_position, _x.sensor_velocity, _x.bus_voltage, _x.bus_current, _x.stator_current, _x.forward_limit_closed, _x.reverse_limit_closed, _x.control_mode, _x.commanded_output, _x.active_trajectory_arbff, _x.active_trajectory_position, _x.active_trajectory_velocity, _x.raw_closed_loop_error, _x.raw_integral_accum, _x.raw_error_derivative, _x.raw_output_percent))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 111
      (_x.id, _x.sensor_position, _x.sensor_velocity, _x.bus_voltage, _x.bus_current, _x.stator_current, _x.forward_limit_closed, _x.reverse_limit_closed, _x.control_mode, _x.commanded_output, _x.active_trajectory_arbff, _x.active_trajectory_position, _x.active_trajectory_velocity, _x.raw_closed_loop_error, _x.raw_integral_accum, _x.raw_error_derivative, _x.raw_output_percent,) = _get_struct_i5d2Bb8d().unpack(str[start:end])
      self.forward_limit_closed = bool(self.forward_limit_closed)
      self.reverse_limit_closed = bool(self.reverse_limit_closed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i5d2Bb8d().pack(_x.id, _x.sensor_position, _x.sensor_velocity, _x.bus_voltage, _x.bus_current, _x.stator_current, _x.forward_limit_closed, _x.reverse_limit_closed, _x.control_mode, _x.commanded_output, _x.active_trajectory_arbff, _x.active_trajectory_position, _x.active_trajectory_velocity, _x.raw_closed_loop_error, _x.raw_integral_accum, _x.raw_error_derivative, _x.raw_output_percent))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 111
      (_x.id, _x.sensor_position, _x.sensor_velocity, _x.bus_voltage, _x.bus_current, _x.stator_current, _x.forward_limit_closed, _x.reverse_limit_closed, _x.control_mode, _x.commanded_output, _x.active_trajectory_arbff, _x.active_trajectory_position, _x.active_trajectory_velocity, _x.raw_closed_loop_error, _x.raw_integral_accum, _x.raw_error_derivative, _x.raw_output_percent,) = _get_struct_i5d2Bb8d().unpack(str[start:end])
      self.forward_limit_closed = bool(self.forward_limit_closed)
      self.reverse_limit_closed = bool(self.reverse_limit_closed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i5d2Bb8d = None
def _get_struct_i5d2Bb8d():
    global _struct_i5d2Bb8d
    if _struct_i5d2Bb8d is None:
        _struct_i5d2Bb8d = struct.Struct("<i5d2Bb8d")
    return _struct_i5d2Bb8d
