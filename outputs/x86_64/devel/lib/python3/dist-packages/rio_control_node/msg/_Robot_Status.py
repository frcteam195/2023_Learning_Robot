# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rio_control_node/Robot_Status.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Robot_Status(genpy.Message):
  _md5sum = "7a9bfc10295848644256ecb78eda2415"
  _type = "rio_control_node/Robot_Status"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Enumeration for Robot State
int8 DISABLED=0
int8 TELEOP=1
int8 AUTONOMOUS=2
int8 TEST=3

# Enumeration for Alliance
int8 RED=0
int8 BLUE=1

int8 robot_state
int8 alliance
float64 match_time
string game_data
int32 selected_auto
"""
  # Pseudo-constants
  DISABLED = 0
  TELEOP = 1
  AUTONOMOUS = 2
  TEST = 3
  RED = 0
  BLUE = 1

  __slots__ = ['robot_state','alliance','match_time','game_data','selected_auto']
  _slot_types = ['int8','int8','float64','string','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_state,alliance,match_time,game_data,selected_auto

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Robot_Status, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robot_state is None:
        self.robot_state = 0
      if self.alliance is None:
        self.alliance = 0
      if self.match_time is None:
        self.match_time = 0.
      if self.game_data is None:
        self.game_data = ''
      if self.selected_auto is None:
        self.selected_auto = 0
    else:
      self.robot_state = 0
      self.alliance = 0
      self.match_time = 0.
      self.game_data = ''
      self.selected_auto = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2bd().pack(_x.robot_state, _x.alliance, _x.match_time))
      _x = self.game_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.selected_auto
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.robot_state, _x.alliance, _x.match_time,) = _get_struct_2bd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.game_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.game_data = str[start:end]
      start = end
      end += 4
      (self.selected_auto,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2bd().pack(_x.robot_state, _x.alliance, _x.match_time))
      _x = self.game_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.selected_auto
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.robot_state, _x.alliance, _x.match_time,) = _get_struct_2bd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.game_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.game_data = str[start:end]
      start = end
      end += 4
      (self.selected_auto,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2bd = None
def _get_struct_2bd():
    global _struct_2bd
    if _struct_2bd is None:
        _struct_2bd = struct.Struct("<2bd")
    return _struct_2bd
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
