# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rio_control_node/Encoder_Config.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Encoder_Config(genpy.Message):
  _md5sum = "815d0c09add4ac47a49ddfe61a20f06c"
  _type = "rio_control_node/Encoder_Config"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int8 CANCoder=0

int8 ENCODERSOURCE_RELATIVE=0
int8 ENCODERSOURCE_ABSOLUTE=1

int8 CAN_RIO_INTERNAL=0
int8 CAN_RIO_CANIVORE=1
int8 CAN_COPROCESSOR_CAN=2

int32 id
int8 encoder_type
int8 sensor_source
int8 can_network
"""
  # Pseudo-constants
  CANCoder = 0
  ENCODERSOURCE_RELATIVE = 0
  ENCODERSOURCE_ABSOLUTE = 1
  CAN_RIO_INTERNAL = 0
  CAN_RIO_CANIVORE = 1
  CAN_COPROCESSOR_CAN = 2

  __slots__ = ['id','encoder_type','sensor_source','can_network']
  _slot_types = ['int32','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,encoder_type,sensor_source,can_network

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Encoder_Config, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.encoder_type is None:
        self.encoder_type = 0
      if self.sensor_source is None:
        self.sensor_source = 0
      if self.can_network is None:
        self.can_network = 0
    else:
      self.id = 0
      self.encoder_type = 0
      self.sensor_source = 0
      self.can_network = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i3b().pack(_x.id, _x.encoder_type, _x.sensor_source, _x.can_network))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.id, _x.encoder_type, _x.sensor_source, _x.can_network,) = _get_struct_i3b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i3b().pack(_x.id, _x.encoder_type, _x.sensor_source, _x.can_network))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.id, _x.encoder_type, _x.sensor_source, _x.can_network,) = _get_struct_i3b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i3b = None
def _get_struct_i3b():
    global _struct_i3b
    if _struct_i3b is None:
        _struct_i3b = struct.Struct("<i3b")
    return _struct_i3b
