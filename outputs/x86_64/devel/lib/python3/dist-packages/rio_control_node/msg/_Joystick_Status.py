# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rio_control_node/Joystick_Status.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rio_control_node.msg

class Joystick_Status(genpy.Message):
  _md5sum = "6a2c90b797652bb6fe1bfe9f60baa7dd"
  _type = "rio_control_node/Joystick_Status"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Joystick[] joysticks
================================================================================
MSG: rio_control_node/Joystick
int32 index
float32[] axes
uint8[] buttons
int16[] povs"""
  __slots__ = ['joysticks']
  _slot_types = ['rio_control_node/Joystick[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joysticks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Joystick_Status, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joysticks is None:
        self.joysticks = []
    else:
      self.joysticks = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.joysticks)
      buff.write(_struct_I.pack(length))
      for val1 in self.joysticks:
        _x = val1.index
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.axes)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.axes))
        _x = val1.buttons
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.povs)
        buff.write(_struct_I.pack(length))
        pattern = '<%sh'%length
        buff.write(struct.Struct(pattern).pack(*val1.povs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joysticks is None:
        self.joysticks = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joysticks = []
      for i in range(0, length):
        val1 = rio_control_node.msg.Joystick()
        start = end
        end += 4
        (val1.index,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.axes = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.buttons = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sh'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.povs = s.unpack(str[start:end])
        self.joysticks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.joysticks)
      buff.write(_struct_I.pack(length))
      for val1 in self.joysticks:
        _x = val1.index
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.axes)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.axes.tostring())
        _x = val1.buttons
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.povs)
        buff.write(_struct_I.pack(length))
        pattern = '<%sh'%length
        buff.write(val1.povs.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joysticks is None:
        self.joysticks = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joysticks = []
      for i in range(0, length):
        val1 = rio_control_node.msg.Joystick()
        start = end
        end += 4
        (val1.index,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.axes = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.buttons = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sh'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.povs = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
        self.joysticks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
