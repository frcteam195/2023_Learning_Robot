# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hmi_agent_node/HMI_Signals.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HMI_Signals(genpy.Message):
  _md5sum = "0ae9d29f2f101d9821189fb63db0942f"
  _type = "hmi_agent_node/HMI_Signals"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 drivetrain_fwd_back
float64 drivetrain_left_right
float64 drivetrain_swerve_percent_fwd_vel
float64 drivetrain_swerve_direction
float64 drivetrain_swerve_percent_angular_rot
bool drivetrain_quickturn
bool drivetrain_brake
float64 turret_aim_degrees
float64 turret_speed_rpm
float64 turret_hood_degrees
bool turret_manual
bool shoot_turret
bool shoot_3ball
bool intake_rollers
bool retract_intake
bool manual_intake
bool manual_outake_back
bool manual_outake_front
bool intake_do_not_eject
bool stop_climber
bool deploy_hooks
bool begin_climb
bool retract_hooks
bool forced_reset_retract_hooks
bool allow_shoot
bool increase_offset
bool decrease_offset
bool angle_increase_offset
bool angle_decrease_offset
bool climber_retry_last_stage"""
  __slots__ = ['drivetrain_fwd_back','drivetrain_left_right','drivetrain_swerve_percent_fwd_vel','drivetrain_swerve_direction','drivetrain_swerve_percent_angular_rot','drivetrain_quickturn','drivetrain_brake','turret_aim_degrees','turret_speed_rpm','turret_hood_degrees','turret_manual','shoot_turret','shoot_3ball','intake_rollers','retract_intake','manual_intake','manual_outake_back','manual_outake_front','intake_do_not_eject','stop_climber','deploy_hooks','begin_climb','retract_hooks','forced_reset_retract_hooks','allow_shoot','increase_offset','decrease_offset','angle_increase_offset','angle_decrease_offset','climber_retry_last_stage']
  _slot_types = ['float64','float64','float64','float64','float64','bool','bool','float64','float64','float64','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       drivetrain_fwd_back,drivetrain_left_right,drivetrain_swerve_percent_fwd_vel,drivetrain_swerve_direction,drivetrain_swerve_percent_angular_rot,drivetrain_quickturn,drivetrain_brake,turret_aim_degrees,turret_speed_rpm,turret_hood_degrees,turret_manual,shoot_turret,shoot_3ball,intake_rollers,retract_intake,manual_intake,manual_outake_back,manual_outake_front,intake_do_not_eject,stop_climber,deploy_hooks,begin_climb,retract_hooks,forced_reset_retract_hooks,allow_shoot,increase_offset,decrease_offset,angle_increase_offset,angle_decrease_offset,climber_retry_last_stage

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HMI_Signals, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.drivetrain_fwd_back is None:
        self.drivetrain_fwd_back = 0.
      if self.drivetrain_left_right is None:
        self.drivetrain_left_right = 0.
      if self.drivetrain_swerve_percent_fwd_vel is None:
        self.drivetrain_swerve_percent_fwd_vel = 0.
      if self.drivetrain_swerve_direction is None:
        self.drivetrain_swerve_direction = 0.
      if self.drivetrain_swerve_percent_angular_rot is None:
        self.drivetrain_swerve_percent_angular_rot = 0.
      if self.drivetrain_quickturn is None:
        self.drivetrain_quickturn = False
      if self.drivetrain_brake is None:
        self.drivetrain_brake = False
      if self.turret_aim_degrees is None:
        self.turret_aim_degrees = 0.
      if self.turret_speed_rpm is None:
        self.turret_speed_rpm = 0.
      if self.turret_hood_degrees is None:
        self.turret_hood_degrees = 0.
      if self.turret_manual is None:
        self.turret_manual = False
      if self.shoot_turret is None:
        self.shoot_turret = False
      if self.shoot_3ball is None:
        self.shoot_3ball = False
      if self.intake_rollers is None:
        self.intake_rollers = False
      if self.retract_intake is None:
        self.retract_intake = False
      if self.manual_intake is None:
        self.manual_intake = False
      if self.manual_outake_back is None:
        self.manual_outake_back = False
      if self.manual_outake_front is None:
        self.manual_outake_front = False
      if self.intake_do_not_eject is None:
        self.intake_do_not_eject = False
      if self.stop_climber is None:
        self.stop_climber = False
      if self.deploy_hooks is None:
        self.deploy_hooks = False
      if self.begin_climb is None:
        self.begin_climb = False
      if self.retract_hooks is None:
        self.retract_hooks = False
      if self.forced_reset_retract_hooks is None:
        self.forced_reset_retract_hooks = False
      if self.allow_shoot is None:
        self.allow_shoot = False
      if self.increase_offset is None:
        self.increase_offset = False
      if self.decrease_offset is None:
        self.decrease_offset = False
      if self.angle_increase_offset is None:
        self.angle_increase_offset = False
      if self.angle_decrease_offset is None:
        self.angle_decrease_offset = False
      if self.climber_retry_last_stage is None:
        self.climber_retry_last_stage = False
    else:
      self.drivetrain_fwd_back = 0.
      self.drivetrain_left_right = 0.
      self.drivetrain_swerve_percent_fwd_vel = 0.
      self.drivetrain_swerve_direction = 0.
      self.drivetrain_swerve_percent_angular_rot = 0.
      self.drivetrain_quickturn = False
      self.drivetrain_brake = False
      self.turret_aim_degrees = 0.
      self.turret_speed_rpm = 0.
      self.turret_hood_degrees = 0.
      self.turret_manual = False
      self.shoot_turret = False
      self.shoot_3ball = False
      self.intake_rollers = False
      self.retract_intake = False
      self.manual_intake = False
      self.manual_outake_back = False
      self.manual_outake_front = False
      self.intake_do_not_eject = False
      self.stop_climber = False
      self.deploy_hooks = False
      self.begin_climb = False
      self.retract_hooks = False
      self.forced_reset_retract_hooks = False
      self.allow_shoot = False
      self.increase_offset = False
      self.decrease_offset = False
      self.angle_increase_offset = False
      self.angle_decrease_offset = False
      self.climber_retry_last_stage = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5d2B3d20B().pack(_x.drivetrain_fwd_back, _x.drivetrain_left_right, _x.drivetrain_swerve_percent_fwd_vel, _x.drivetrain_swerve_direction, _x.drivetrain_swerve_percent_angular_rot, _x.drivetrain_quickturn, _x.drivetrain_brake, _x.turret_aim_degrees, _x.turret_speed_rpm, _x.turret_hood_degrees, _x.turret_manual, _x.shoot_turret, _x.shoot_3ball, _x.intake_rollers, _x.retract_intake, _x.manual_intake, _x.manual_outake_back, _x.manual_outake_front, _x.intake_do_not_eject, _x.stop_climber, _x.deploy_hooks, _x.begin_climb, _x.retract_hooks, _x.forced_reset_retract_hooks, _x.allow_shoot, _x.increase_offset, _x.decrease_offset, _x.angle_increase_offset, _x.angle_decrease_offset, _x.climber_retry_last_stage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 86
      (_x.drivetrain_fwd_back, _x.drivetrain_left_right, _x.drivetrain_swerve_percent_fwd_vel, _x.drivetrain_swerve_direction, _x.drivetrain_swerve_percent_angular_rot, _x.drivetrain_quickturn, _x.drivetrain_brake, _x.turret_aim_degrees, _x.turret_speed_rpm, _x.turret_hood_degrees, _x.turret_manual, _x.shoot_turret, _x.shoot_3ball, _x.intake_rollers, _x.retract_intake, _x.manual_intake, _x.manual_outake_back, _x.manual_outake_front, _x.intake_do_not_eject, _x.stop_climber, _x.deploy_hooks, _x.begin_climb, _x.retract_hooks, _x.forced_reset_retract_hooks, _x.allow_shoot, _x.increase_offset, _x.decrease_offset, _x.angle_increase_offset, _x.angle_decrease_offset, _x.climber_retry_last_stage,) = _get_struct_5d2B3d20B().unpack(str[start:end])
      self.drivetrain_quickturn = bool(self.drivetrain_quickturn)
      self.drivetrain_brake = bool(self.drivetrain_brake)
      self.turret_manual = bool(self.turret_manual)
      self.shoot_turret = bool(self.shoot_turret)
      self.shoot_3ball = bool(self.shoot_3ball)
      self.intake_rollers = bool(self.intake_rollers)
      self.retract_intake = bool(self.retract_intake)
      self.manual_intake = bool(self.manual_intake)
      self.manual_outake_back = bool(self.manual_outake_back)
      self.manual_outake_front = bool(self.manual_outake_front)
      self.intake_do_not_eject = bool(self.intake_do_not_eject)
      self.stop_climber = bool(self.stop_climber)
      self.deploy_hooks = bool(self.deploy_hooks)
      self.begin_climb = bool(self.begin_climb)
      self.retract_hooks = bool(self.retract_hooks)
      self.forced_reset_retract_hooks = bool(self.forced_reset_retract_hooks)
      self.allow_shoot = bool(self.allow_shoot)
      self.increase_offset = bool(self.increase_offset)
      self.decrease_offset = bool(self.decrease_offset)
      self.angle_increase_offset = bool(self.angle_increase_offset)
      self.angle_decrease_offset = bool(self.angle_decrease_offset)
      self.climber_retry_last_stage = bool(self.climber_retry_last_stage)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5d2B3d20B().pack(_x.drivetrain_fwd_back, _x.drivetrain_left_right, _x.drivetrain_swerve_percent_fwd_vel, _x.drivetrain_swerve_direction, _x.drivetrain_swerve_percent_angular_rot, _x.drivetrain_quickturn, _x.drivetrain_brake, _x.turret_aim_degrees, _x.turret_speed_rpm, _x.turret_hood_degrees, _x.turret_manual, _x.shoot_turret, _x.shoot_3ball, _x.intake_rollers, _x.retract_intake, _x.manual_intake, _x.manual_outake_back, _x.manual_outake_front, _x.intake_do_not_eject, _x.stop_climber, _x.deploy_hooks, _x.begin_climb, _x.retract_hooks, _x.forced_reset_retract_hooks, _x.allow_shoot, _x.increase_offset, _x.decrease_offset, _x.angle_increase_offset, _x.angle_decrease_offset, _x.climber_retry_last_stage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 86
      (_x.drivetrain_fwd_back, _x.drivetrain_left_right, _x.drivetrain_swerve_percent_fwd_vel, _x.drivetrain_swerve_direction, _x.drivetrain_swerve_percent_angular_rot, _x.drivetrain_quickturn, _x.drivetrain_brake, _x.turret_aim_degrees, _x.turret_speed_rpm, _x.turret_hood_degrees, _x.turret_manual, _x.shoot_turret, _x.shoot_3ball, _x.intake_rollers, _x.retract_intake, _x.manual_intake, _x.manual_outake_back, _x.manual_outake_front, _x.intake_do_not_eject, _x.stop_climber, _x.deploy_hooks, _x.begin_climb, _x.retract_hooks, _x.forced_reset_retract_hooks, _x.allow_shoot, _x.increase_offset, _x.decrease_offset, _x.angle_increase_offset, _x.angle_decrease_offset, _x.climber_retry_last_stage,) = _get_struct_5d2B3d20B().unpack(str[start:end])
      self.drivetrain_quickturn = bool(self.drivetrain_quickturn)
      self.drivetrain_brake = bool(self.drivetrain_brake)
      self.turret_manual = bool(self.turret_manual)
      self.shoot_turret = bool(self.shoot_turret)
      self.shoot_3ball = bool(self.shoot_3ball)
      self.intake_rollers = bool(self.intake_rollers)
      self.retract_intake = bool(self.retract_intake)
      self.manual_intake = bool(self.manual_intake)
      self.manual_outake_back = bool(self.manual_outake_back)
      self.manual_outake_front = bool(self.manual_outake_front)
      self.intake_do_not_eject = bool(self.intake_do_not_eject)
      self.stop_climber = bool(self.stop_climber)
      self.deploy_hooks = bool(self.deploy_hooks)
      self.begin_climb = bool(self.begin_climb)
      self.retract_hooks = bool(self.retract_hooks)
      self.forced_reset_retract_hooks = bool(self.forced_reset_retract_hooks)
      self.allow_shoot = bool(self.allow_shoot)
      self.increase_offset = bool(self.increase_offset)
      self.decrease_offset = bool(self.decrease_offset)
      self.angle_increase_offset = bool(self.angle_increase_offset)
      self.angle_decrease_offset = bool(self.angle_decrease_offset)
      self.climber_retry_last_stage = bool(self.climber_retry_last_stage)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5d2B3d20B = None
def _get_struct_5d2B3d20B():
    global _struct_5d2B3d20B
    if _struct_5d2B3d20B is None:
        _struct_5d2B3d20B = struct.Struct("<5d2B3d20B")
    return _struct_5d2B3d20B
